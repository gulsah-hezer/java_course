
Polymorphism OOP için gerçekten önemli bir kavram. Polymorphism işlerimizi çoğu zaman kolaylaştırıyor.
Genel kavram olarak bir nesnenin birden fazla nesne gibi davranma şeklidir.

ex:
***class Hayvan şeklinde diğer classımızı yarattık ve isim özelliğini ekledik.
Constructor ve getter setter metotlarımızı oluşturduk. 
Son olarak konus() adında bir metot yazdık.

***Şimdi Hayvan classından miras alan 3 tane class yazalım.
Kedi classımız Hayvan classımızdan miras alacağı için extends yaptık.Constructorımızıda oluşturduk. Ek olarak konus() metodumuzu override ettik.Bunun için yine kısayol kullandık.

****Ancak biz Hayvan classındaki metodu değilde kendi metodumuzu yazmak istiyoruz. Bu yüzden aşağıdaki gibi düzenliyoruz.
Yine aynı şekilde constructorımızı oluşturduk ve metot override yaptık.

***Şimdi artık polymorphismi görebiliriz.
Normalde main classı içerisinde bu zamana kadar objeyi hep aşağıdaki gibi tanımlamıştık.

pubic class Main {
      public static void main (String[] args) {
      
      Hayvan hayvan=new Hayvan ("Richi");
      System.out.println(hayvan.konus());
      }
   }
   
 **********************************************************************
 Fakat şimdi hiç görmediğimiz bir tanımla şeklini göreceğiz.
 Aşağıdaki gibi tanımladığımızda javanın hata vermediğini görüyoruz.
 **********************************************************************
                       POLYMORPHİSM
 **********************************************************************
 
 public class Main {
        public static void main(String[] args){
        Hayvan hayvan= new Kedi (" Mikedi");
        System.out.println(hayvan.konus());
        
        
 İşte polymorphism bu aslında. 
 Bir tane referans birden farklı obje gibi davranıyor. 
 Yani bizim hayvan referansımız var ancak biz buna Kedi referansı atadık.
 ***********************************************************************
        
 Polymorphism yapmak için şu şartların olması gerekir.

1-) Ana classınız olacak. Bizim bu örnekteki ana classımız Hayvan classıydı.

2-) Geri kalan classlar alt sınıf olacak yani Hayvan classından miras alacaklar.

***********************************************************************

Biz bir objeyi birden fazla obje gibi kullanabiliyoruz. 
Ama bunun için mutlaka inheritance şeklinde bir yapınızın olması gerekiyor.


public class Main {
public static void main(String[] args){

        Hayvan hayvan= new Kedi (" Mikedi");
        Hayvan hayvan1= new Köpek ("Richi");
        Hayvan hayvan2= new At (" Monyak");
        
        System.out.println(hayvan.konus());
        System.out.println(hayvan1.konus());
        System.out.println(hayvan2.konus());
        
****************************************************************************

hayvan1 e biz kopeği atıyoruz. Ve yukarıdan başlıyor. konus() metodum var mı diye bakıyor. 
Bana Kopek referansı atanmıştı. Kopeğin içinde bakıyor konus() metodu var mı?
Varsa onu yoksa kendi metodunu çağırıyor.

****************************************************************************
Şimdi polymorphism in en önemli faydasına geldik.

main classı içerisine konustur() şeklinde yeni bir fonksiyon yazıyoruz. 
Ve bu fonksiyonumuz Hayvan tipinden bir referans alacak.

EX:
public class Main {
       public static void konustur(Hayvan hayvan){
       System.out.println(hayvan.konus());
       }
       public static void main(String[] args) {
       konustur(new Kedi("Mikedi"));
       konustur(new Köpek("Richi"));
       konustur(new At("Monyak"));
       
******************************************************************************
       
       







