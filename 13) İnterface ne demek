nesne yönelimli programlamanın 3 temel üyesi olan "Class" lar, "Abstract Class" lar ve "Interface" lerdir.Interface ler class kabul edilmiyor fakat 
"nomral class" lar gibi ve "abstract class" lar gibi "reference" tutabiliyorlar.

*Class larda tüm metotların içinin dolu olması gerekiyor fakat 
*Abstract class larda mothodların kimisi dolu olabilir kimisi boş olabilir.
*Bir class birden fazla interface i implemente edebiliyor.


public Interface ICustomerDal {
       void add();
}


Interface lerde abstractlar gibi new lenemezler.Çünkü sadece reference tutuyor.
Genellikle yazılım projelerinde katmanlar vardır.

Bir yazılım projesinde 3 katman olduğunu varsayarsak: arayüz, iş katmanı(koşul katmanı) ve Data Access katmanı olarak.Bu katmanlar arasında geçiş yaparken 
genellikle interfaceler kullanılır bunun sebebi ise bağımlılığı önlemektir.

***************************


Interface sınıfında sadece method tanımları bulunur. 
İçlerine kod parçacığı yazılmaz.
İçerisinde tanımlanan method tanımları bu interface’i implemente edecek diğer sınıflar tarafından implement edilmesi zorunludur.

****************************

Interfaceler başka bir interface den inherit olabilirler.
Interface’ler genelde can-do ilişkisi vardır.

Örnek vermek gerekirse;

+Ferrari can-do drive itself

****************************

 /// Bazı arabalar cabriolet olabilir hepsinin ortak bir özelliği değildir.
    /// </summary>
    interface ICabrioled
    {
        void TavanTipi();
    }
 
    abstract class Araba
    {
        public string Marka { get; set; }
        public int VitesSayisi { get; set; }
        // Kısacası arabaların sahip oldukları tüm ortak özellikler
 
        public abstract void MaximumHiz();
        // Override edilecek methodumuz çünkü her arabanın kendine özgü bir maximum hız bilgisi vardır
    }
 
    /// <summary>
    /// Ferrari'yi Araba sınıfımızdan inherit alıyoruz ve yeniden şekillendiriyoruz. Ferrarimiz cabriolet ve ICabriolet özelliğini implemente ediyoruz.
    /// </summary>
    class Ferrari : Araba, ICabrioled
    {
        /// <summary>
        /// Maximum hız bilgimizi override ediyoruz ve Araba abstract sınıfımızın sahip olduğu tüm özelliklere sahip oluyor.
        /// </summary>
        public override void MaximumHiz()
        {
            Console.WriteLine("Ferrari'nin maximum hızı: 300");
        }
 
        /// <summary>
        /// ICabrioled'i implemente ettiğimiz için TavanTipi methodumuzu tanımlıyoruz.
        /// </summary>
        public void TavanTipi()
        {
            Console.WriteLine("Metal tavan");
        }
    }
*********************************

Açıklamak gerekirse her aracımız cabriolet olamayacağı için bunu interface olarak tanımlamıştık.
“Ferrari” gibi bir aracımızı varsaydık ve buna “ICabrioled” interface’imizi implemente ettik.
Interface’ler içerisine kod parçacıkları yazılmaz, sadece method tanımları bulunur. 
Bunuda gösterebilmek amaçlı sadece “TavanTipi” isminde bir tanımlama yaptık ve “Metal tavan” olarak belirttik.

*******************************

Interface sınıfının genel özelliklerini sıralayacak olursak;

Kod içerisinde “new” anahtar sözcüğü ile oluşturulamazlar.
Bir sınıf birden fazla interface implemente edebilir.
Implemente edicek sınıflar arasında genelde “can-do” ilişkisi vardır.
Interface içerisine sadece boş method’lar tanımlanabilir.


