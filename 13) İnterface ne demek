nesne yönelimli programlamanın 3 temel üyesi olan "Class" lar, "Abstract Class" lar ve "Interface" lerdir.Interface ler class kabul edilmiyor fakat 
"nomral class" lar gibi ve "abstract class" lar gibi "reference" tutabiliyorlar.

*Class larda tüm metotların içinin dolu olması gerekiyor fakat 
*Abstract class larda mothodların kimisi dolu olabilir kimisi boş olabilir.
*Bir class birden fazla interface i implemente edebiliyor.


public Interface ICustomerDal {
       void add();
}


Interface lerde abstractlar gibi new lenemezler.Çünkü sadece reference tutuyor.
Genellikle yazılım projelerinde katmanlar vardır.

Bir yazılım projesinde 3 katman olduğunu varsayarsak: arayüz, iş katmanı(koşul katmanı) ve Data Access katmanı olarak.Bu katmanlar arasında geçiş yaparken 
genellikle interfaceler kullanılır bunun sebebi ise bağımlılığı önlemektir.


ex:Ferrari bir arabadır ve arabanın sahip olduğu tüm özelliklere sahiptir.

abstract class Araba
    {
        public string Marka { get; set; }
        public int VitesSayisi { get; set; }
        // Kısacası arabaların sahip oldukları tüm ortak özellikler
 
        public abstract void MaximumHiz();
        // Override edilecek methodumuz çünkü her arabanın kendine özgü bir maximum hız bilgisi vardır
    }
 
    /// <summary>
    /// Ferrari'yi Araba sınıfımızdan inherit alıyoruz.
    /// </summary>
    class Ferrari : Araba
    {
        /// <summary>
        /// Maximum hız bilgimizi override ediyoruz ve Araba abstract sınıfımızın sahip olduğu tüm özelliklere sahip oluyor.
        /// </summary>
        public override void MaximumHiz()
        {
            Console.WriteLine("Ferrari'nin maximum hızı: 300");
        }
    }
